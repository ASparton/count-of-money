generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String       @id @unique
    username     String
    email        String
    auth_session Session[]
    key          Key[]
    keywords     Keyword[]
    currency     String       @default("EUR")
    cryptos      UserCrypto[]
    is_admin     Boolean      @default(false)
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Feed {
    id                 Int       @id @default(autoincrement())
    url                String    @unique
    min_articles_count Int       @default(3)
    articles           Article[]
}

model Article {
    id             Int      @id @default(autoincrement())
    title          String
    url            String   @unique
    image_url      String?
    content        String
    published      DateTime
    source_feed_id Int
    source_feed    Feed     @relation(references: [id], fields: [source_feed_id], onDelete: Cascade)

    @@index([source_feed_id])
    @@index([title])
}

model Keyword {
    id      Int    @id @default(autoincrement())
    user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
    user_id String
    name    String
}

model Crypto {
    id       Int          @id @default(autoincrement())
    name     String       @unique
    logo_url String       @unique
    api_id   String       @unique
    visible  Boolean      @default(false)
    liked_by UserCrypto[]
}

model UserCrypto {
    user      User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
    user_id   String
    crypto    Crypto @relation(references: [id], fields: [crypto_id], onDelete: Cascade)
    crypto_id Int

    @@id([user_id, crypto_id])
}
